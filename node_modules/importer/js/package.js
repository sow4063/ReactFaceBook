// Generated by CoffeeScript 1.6.1
var File, Module, Package, UglifyJS, path;

File = require('./file');

UglifyJS = require('uglify-js');

Module = require('module');

path = require('path');

Package = (function() {

  function Package(main, options) {
    var _ref, _ref1, _ref2, _ref3;
    this.main = main;
    if (options == null) {
      options = {};
    }
    this.minify = (_ref = options.minify) != null ? _ref : false;
    this.sync = (_ref1 = options.sync) != null ? _ref1 : false;
    this.frameworkPath = (_ref2 = options.frameworkPath) != null ? _ref2 : "./frameworks";
    this.sourceMap = (_ref3 = options.sourceMap) != null ? _ref3 : false;
    this.files = {};
    this.imported = {};
    this.cache = '';
    this.mainFile = this.load(this.main);
  }

  Package.prototype.load = function(filename) {
    var file;
    if (this.files[filename]) {
      return this.files[filename];
    }
    file = new File(this, filename);
    this.files[filename] = file;
    return file;
  };

  Package.prototype.build = function(callback) {
    var fn,
      _this = this;
    this.imported = {};
    if (this.sync) {
      fn = function(err, changed) {
        if (err) {
          throw err;
        }
        if (changed) {
          return _this.reminify();
        }
      };
    } else {
      fn = function(err, changed) {
        if (err) {
          return callback(err);
        }
        if (changed) {
          _this.reminify();
        }
        return callback(null, _this.cache);
      };
    }
    this.mainFile.compile(fn);
    if (this.sync) {
      return this.cache;
    }
  };

  Package.prototype.reminify = function(changed) {
    var ast, code, map, sq;
    code = this.mainFile.cache.toString();
    map = this.mainFile.cache.toJSONSourceMap();
    if (this.minify) {
      ast = UglifyJS.parse(code);
      ast.figure_out_scope();
      sq = UglifyJS.Compressor({
        warnings: false
      });
      ast = ast.transform(sq);
      ast.figure_out_scope();
      ast.compute_char_frequency();
      ast.mangle_names();
      map && (map = UglifyJS.SourceMap({
        file: map.file,
        orig: map
      }));
      code = ast.print_to_string({
        source_map: map
      });
    }
    if (this.sourceMap) {
      code += "\n\n//@ sourceMappingURL=" + this.sourceMap;
      map = JSON.stringify(map);
    }
    return this.cache = {
      code: code,
      map: map
    };
  };

  Package.prototype.require = function() {
    var code, mod, sync;
    sync = this.sync;
    this.sync = true;
    code = this.build().code;
    this.sync = sync;
    mod = new Module(this.main, module);
    mod.filename = this.mainFile.path;
    mod.paths = Module._nodeModulePaths(path.dirname(mod.filename));
    return mod._compile(code, mod.filename);
  };

  return Package;

})();

module.exports = Package;
