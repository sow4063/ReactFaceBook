// Generated by CoffeeScript 1.6.1
var SourceMap, SourceMapConsumer, SourceMapGenerator, _ref;

_ref = require('source-map'), SourceMapGenerator = _ref.SourceMapGenerator, SourceMapConsumer = _ref.SourceMapConsumer;

SourceMap = (function() {

  function SourceMap(_arg) {
    var inSourceMap;
    this.source = _arg.source, this.compiled = _arg.compiled, this.makeSourceMap = _arg.makeSourceMap, inSourceMap = _arg.inSourceMap, this.filename = _arg.filename;
    this.sources = {};
    this.sources[this.filename] = this.source;
    this.code = [];
    this.compiledOffset = 0;
    if (this.makeSourceMap) {
      if (inSourceMap) {
        this.originalMap = new SourceMapConsumer(inSourceMap);
      }
      this.map = new SourceMapGenerator({
        file: this.filename
      });
      this.mappingOffset = 0;
      this.inputLine = 1;
      this.line = 1;
    }
  }

  SourceMap.prototype.addSegment = function(offset) {
    var endColumn, endLine, i, line, lines, mapping, mappings, start, str, _i, _len;
    if (offset === this.compiledOffset) {
      return;
    }
    str = this.compiled.slice(this.compiledOffset, offset);
    this.compiledOffset = offset;
    this.code.push(str);
    if (!this.makeSourceMap) {
      return;
    }
    lines = str.split('\n');
    if (this.originalMap) {
      mappings = this.originalMap._generatedMappings;
      mapping = mappings[this.mappingOffset];
      start = mapping;
      endLine = start.generatedLine + lines.length - 1;
      endColumn = lines[lines.length - 1].length;
      while ((mapping != null ? mapping.generatedLine : void 0) < endLine || (mapping != null ? mapping.generatedColumn : void 0) < endColumn) {
        this.map.addMapping({
          source: this.filename,
          generated: {
            line: this.line + mapping.generatedLine - start.generatedLine,
            column: mapping.generatedColumn
          },
          original: {
            line: mapping.originalLine,
            column: mapping.originalColumn
          }
        });
        mapping = mappings[++this.mappingOffset];
      }
    } else {
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line = lines[i];
        if (line.length > 0) {
          this.map.addMapping({
            source: this.filename,
            generated: {
              line: this.line + i,
              column: 0
            },
            original: {
              line: this.inputLine + i,
              column: 0
            }
          });
        }
      }
    }
    this.line += lines.length - 1;
    return this.inputLine += lines.length - 1;
  };

  SourceMap.prototype.addSource = function(sourceMap) {
    var file, i, mapping, source, _i, _len, _ref1, _ref2, _ref3;
    (_ref1 = this.code).push.apply(_ref1, sourceMap.code);
    _ref2 = sourceMap.sources;
    for (file in _ref2) {
      source = _ref2[file];
      this.sources[file] = source;
    }
    if (!this.makeSourceMap) {
      return;
    }
    _ref3 = sourceMap.map._mappings;
    for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
      mapping = _ref3[i];
      this.map.addMapping({
        source: mapping.source,
        generated: {
          line: this.line + mapping.generated.line - 1,
          column: mapping.generated.column
        },
        original: {
          line: mapping.original.line,
          column: mapping.original.column
        }
      });
    }
    return this.line += sourceMap.line - 1;
  };

  SourceMap.prototype.toString = function() {
    return this.code.join('');
  };

  SourceMap.prototype.toJSONSourceMap = function() {
    var json, source, _i, _len, _ref1;
    if (!this.makeSourceMap) {
      return null;
    }
    json = this.map.toJSON();
    json.sourcesContent = [];
    _ref1 = json.sources;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      source = _ref1[_i];
      json.sourcesContent.push(this.sources[source]);
    }
    return json;
  };

  return SourceMap;

})();

module.exports = SourceMap;
